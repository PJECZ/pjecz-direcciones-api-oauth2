{
    "FastAPI paths": {
        "scope": "python",
        "prefix": "fpaths",
        "body": [
            "\"\"\"",
            "${1:Modulos} ${2:v1}, rutas (paths)",
            "\"\"\"",
            "from fastapi import APIRouter, Depends, HTTPException",
            "from fastapi_pagination.ext.sqlalchemy import paginate",
            "from sqlalchemy.orm import Session",
            "",
            "from lib.database import get_db",
            "from lib.fastapi_pagination import LimitOffsetPage",
            "",
            "from direcciones.${2:v1}.roles.models import Permiso",
            "from direcciones.${2:v1}.usuarios.authentications import get_current_active_user",
            "from direcciones.${2:v1}.usuarios.schemas import UsuarioInBD",
            "",
            "from direcciones.${2:v1}.${3:plural}.crud import get_${3:plural}, get_${4:singular}",
            "from direcciones.${2:v1}.${3:plural}.schemas import ${5:EsquemaOut}",
            "",
            "${3:plural} = APIRouter(prefix=\"/v1/${3:plural}\", tags=[\"${3:plural}\"])",
            "",
            "",
            "@${3:plural}.get(\"\", response_model=LimitOffsetPage[${5:EsquemaOut}])",
            "async def list_paginate(",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Listado de ${3:plural}\"\"\"",
            "\tif not current_user.permissions & Permiso.${6:VER_PERMISO} == Permiso.${6:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\treturn paginate(get_${3:plural}(db))",
            "",
            "",
            "@${3:plural}.get(\"/{${4:singular}_id}\", response_model=${5:EsquemaOut})",
            "async def detail(",
            "\t${4:singular}_id: int,",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Detalle de una ${4:singular} a partir de su id\"\"\"",
            "\tif not current_user.permissions & Permiso.${6:VER_PERMISO} == Permiso.${6:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\ttry:",
            "\t\t${4:singular} = get_${4:singular}(db, ${4:singular}_id)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f\"Not found: {str(error)}\") from error",
            "\texcept ValueError as error:",
            "\t\traise HTTPException(status_code=406, detail=f\"Not acceptable: {str(error)}\") from error",
            "\treturn ${5:EsquemaOut}.from_orm(${4:singular})",
            ""
        ],
        "description": "Contenido para paths.py"
    },
    "FastAPI paths autoridad": {
        "scope": "python",
        "prefix": "fpaths_autoridad",
        "body": [
            "\"\"\"",
            "${1:Modulos} ${2:v1}, rutas (paths)",
            "\"\"\"",
            "from datetime import date",
            "from fastapi import APIRouter, Depends, HTTPException",
            "from lib.fastapi_pagination import LimitOffsetPage",
            "from fastapi_pagination.ext.sqlalchemy import paginate",
            "from sqlalchemy.orm import Session",
            "",
            "from lib.database import get_db",
            "from direcciones.${2:v1}.roles.models import Permiso",
            "from direcciones.${2:v1}.usuarios.authentications import get_current_active_user",
            "from direcciones.${2:v1}.usuarios.schemas import UsuarioInBD",
            "",
            "from direcciones.${2:v1}.${3:plural}.crud import get_${3:plural}, get_${4:singular}",
            "from direcciones.${2:v1}.${3:plural}.schemas import ${5:EsquemaOut}",
            "",
            "router = APIRouter()",
            "",
            "",
            "@router.get(\"\", response_model=LimitOffsetPage[${5:EsquemaOut}])",
            "async def list_paginate(",
            "\tfecha: date = None,",
            "\tanio: int = None,",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Listado de ${3:plural}\"\"\"",
            "\tif not current_user.permissions & Permiso.${7:VER_PERMISO} == Permiso.${7:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\ttry:",
            "\t\tlistado = get_${3:plural}(",
            "\t\t\tdb,",
            "\t\t\tfecha=fecha,",
            "\t\t\tanio=anio,",
            "\t\t)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f\"Not found: {str(error)}\") from error",
            "\texcept ValueError as error:",
            "\t\traise HTTPException(status_code=406, detail=f\"Not acceptable: {str(error)}\") from error",
            "\treturn paginate(listado)",
            "",
            "",
            "@router.get(\"/{${4:singular}_id}\", response_model=${5:EsquemaOut})",
            "async def detail(",
            "\t${4:singular}_id: int,",
            "\tcurrent_user: UsuarioInBD = Depends(get_current_active_user),",
            "\tdb: Session = Depends(get_db),",
            "):",
            "\t\"\"\"Detalle de una ${4:singular} a partir de su id\"\"\"",
            "\tif not current_user.permissions & Permiso.${7:VER_PERMISO} == Permiso.${7:VER_PERMISO}:",
            "\t\traise HTTPException(status_code=403, detail=\"Forbidden\")",
            "\ttry:",
            "\t\t${4:singular} = get_${4:singular}(db, ${4:singular}_id)",
            "\texcept IndexError as error:",
            "\t\traise HTTPException(status_code=404, detail=f\"Not found: {str(error)}\") from error",
            "\texcept ValueError as error:",
            "\t\traise HTTPException(status_code=406, detail=f\"Not acceptable: {str(error)}\") from error",
            "\treturn ${5:EsquemaOut}.from_orm(${4:singular})",
            ""
        ],
        "description": "Contenido para paths.py relacionado con autoridad"
    }
}
